# Scale
rast_tmp_hazed_masked_scaled <- terra::scale(rast_tmp_hazed_masked,
center=F,
scale=T)
assign(paste0("rast_hazed_masked_scaled_day",i), rast_tmp_hazed_masked_scaled)
# Extract themean  reflectance data from the ponds
#extract_tmp <- extract(rast_tmp_masked,pond_polygons_d,fun=mean,na.rm=TRUE)
extract_tmp <- extract(rast_tmp_hazed_masked_scaled,pond_polygons_d,fun=mean,na.rm=TRUE)
names(extract_tmp)[c(2:ncol(extract_tmp))] <-
paste0(names(extract_tmp)[c(2:ncol(extract_tmp))],"_day",i)
assign(paste0("extract_rast_day",i), extract_tmp)
}
rast_masked_day1_pondsonly <- mask(rast_hazed_masked_scaled_day1,
project(pond_polygons_d,rast_hazed_masked_scaled_day1))
rast_masked_day3_pondsonly <- mask(rast_hazed_masked_scaled_day3,
project(pond_polygons_d,rast_hazed_masked_scaled_day3))
rast_masked_day1_pondsonly$NDCI <- (rast_masked_day1_pondsonly$B5-rast_masked_day1_pondsonly$B4)/
(rast_masked_day1_pondsonly$B5+rast_masked_day1_pondsonly$B4)
rast_masked_day3_pondsonly$NDCI <- (rast_masked_day3_pondsonly$B5-rast_masked_day3_pondsonly$B4)/
(rast_masked_day3_pondsonly$B5+rast_masked_day3_pondsonly$B4)
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day1_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
# Now repeat the process (sorry)
# mask by the cloud threshold
# and then extract mean values for each band for each pond
# Note that this requires the cloud masks and the main data tifs
# to have identical filenames per day
for (i in c(1:length(filenames))){
# Import rasters
rast_tmp <- rast(paste0("gee_tifs/",filenames[i]))
cloud_tmp <- rast(paste0("gee_cloudmasks/",filenames[i]))
# Adjust for haze (sorry)
rast_tmp_hazed <- rast_tmp
rast_tmp_hazed$B1 <- rast_tmp_hazed$B1/df_haze_rel$B1[i]
rast_tmp_hazed$B2 <- rast_tmp_hazed$B2/df_haze_rel$B2[i]
rast_tmp_hazed$B3 <- rast_tmp_hazed$B3/df_haze_rel$B3[i]
rast_tmp_hazed$B4 <- rast_tmp_hazed$B4/df_haze_rel$B4[i]
rast_tmp_hazed$B5 <- rast_tmp_hazed$B5/df_haze_rel$B5[i]
rast_tmp_hazed$B6 <- rast_tmp_hazed$B6/df_haze_rel$B6[i]
rast_tmp_hazed$B7 <- rast_tmp_hazed$B7/df_haze_rel$B7[i]
rast_tmp_hazed$B8 <- rast_tmp_hazed$B8/df_haze_rel$B8[i]
rast_tmp_hazed$B8A <- rast_tmp_hazed$B8A/df_haze_rel$B8A[i]
rast_tmp_hazed$B9 <- rast_tmp_hazed$B9/df_haze_rel$B9[i]
rast_tmp_hazed$B11 <- rast_tmp_hazed$B11/df_haze_rel$B11[i]
rast_tmp_hazed$B12 <- rast_tmp_hazed$B12/df_haze_rel$B12[i]
assign(paste0("rast_hazed_day",i), rast_tmp_hazed)
# Perform cloud masking
#rast_tmp_resampled <- resample(rast_tmp,cloud_tmp,method="near")
cloud_tmp_resampled <- resample(cloud_tmp,rast_tmp)
rast_tmp_hazed_masked <- mask(x = rast_tmp,
mask = cloud_tmp_resampled,
maskvalues = seq(cloud_threshold[i],100,1))
assign(paste0("rast_hazed_masked_day",i), rast_tmp_hazed_masked)
# Scale
rast_tmp_hazed_masked_scaled <- terra::scale(rast_tmp_hazed_masked,
center=F,
scale=T)
assign(paste0("rast_hazed_masked_scaled_day",i), rast_tmp_hazed_masked_scaled)
# Extract themean  reflectance data from the ponds
#extract_tmp <- extract(rast_tmp_masked,pond_polygons_d,fun=mean,na.rm=TRUE)
extract_tmp <- extract(rast_tmp_hazed_masked_scaled,pond_polygons_d,fun=mean,na.rm=TRUE)
names(extract_tmp)[c(2:ncol(extract_tmp))] <-
paste0(names(extract_tmp)[c(2:ncol(extract_tmp))],"_day",i)
assign(paste0("extract_rast_day",i), extract_tmp)
}
rast_masked_day1_pondsonly <- mask(rast_hazed_masked_scaled_day1,
project(pond_polygons_d,rast_hazed_masked_scaled_day1))
rast_masked_day3_pondsonly <- mask(rast_hazed_masked_scaled_day3,
project(pond_polygons_d,rast_hazed_masked_scaled_day3))
rast_masked_day1_pondsonly$NDCI <- (rast_masked_day1_pondsonly$B5-rast_masked_day1_pondsonly$B4)/
(rast_masked_day1_pondsonly$B5+rast_masked_day1_pondsonly$B4)
rast_masked_day3_pondsonly$NDCI <- (rast_masked_day3_pondsonly$B5-rast_masked_day3_pondsonly$B4)/
(rast_masked_day3_pondsonly$B5+rast_masked_day3_pondsonly$B4)
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day1_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
# Now repeat the process (sorry)
# mask by the cloud threshold
# and then extract mean values for each band for each pond
# Note that this requires the cloud masks and the main data tifs
# to have identical filenames per day
for (i in c(1:length(filenames))){
# Import rasters
rast_tmp <- rast(paste0("gee_tifs/",filenames[i]))
cloud_tmp <- rast(paste0("gee_cloudmasks/",filenames[i]))
# Adjust for haze (sorry)
rast_tmp_hazed <- rast_tmp
rast_tmp_hazed$B1 <- rast_tmp_hazed$B1/df_haze_rel$B1[i]
rast_tmp_hazed$B2 <- rast_tmp_hazed$B2/df_haze_rel$B2[i]
rast_tmp_hazed$B3 <- rast_tmp_hazed$B3/df_haze_rel$B3[i]
rast_tmp_hazed$B4 <- rast_tmp_hazed$B4/df_haze_rel$B4[i]
rast_tmp_hazed$B5 <- rast_tmp_hazed$B5/df_haze_rel$B5[i]
rast_tmp_hazed$B6 <- rast_tmp_hazed$B6/df_haze_rel$B6[i]
rast_tmp_hazed$B7 <- rast_tmp_hazed$B7/df_haze_rel$B7[i]
rast_tmp_hazed$B8 <- rast_tmp_hazed$B8/df_haze_rel$B8[i]
rast_tmp_hazed$B8A <- rast_tmp_hazed$B8A/df_haze_rel$B8A[i]
rast_tmp_hazed$B9 <- rast_tmp_hazed$B9/df_haze_rel$B9[i]
rast_tmp_hazed$B11 <- rast_tmp_hazed$B11/df_haze_rel$B11[i]
rast_tmp_hazed$B12 <- rast_tmp_hazed$B12/df_haze_rel$B12[i]
assign(paste0("rast_hazed_day",i), rast_tmp_hazed)
# Perform cloud masking
#rast_tmp_resampled <- resample(rast_tmp,cloud_tmp,method="near")
cloud_tmp_resampled <- resample(cloud_tmp,rast_tmp,method="near")
rast_tmp_hazed_masked <- mask(x = rast_tmp,
mask = cloud_tmp_resampled,
maskvalues = seq(cloud_threshold[i],100,1))
assign(paste0("rast_hazed_masked_day",i), rast_tmp_hazed_masked)
# Scale
rast_tmp_hazed_masked_scaled <- terra::scale(rast_tmp_hazed_masked,
center=F,
scale=T)
assign(paste0("rast_hazed_masked_scaled_day",i), rast_tmp_hazed_masked_scaled)
# Extract themean  reflectance data from the ponds
#extract_tmp <- extract(rast_tmp_masked,pond_polygons_d,fun=mean,na.rm=TRUE)
extract_tmp <- extract(rast_tmp_hazed_masked_scaled,pond_polygons_d,fun=mean,na.rm=TRUE)
names(extract_tmp)[c(2:ncol(extract_tmp))] <-
paste0(names(extract_tmp)[c(2:ncol(extract_tmp))],"_day",i)
assign(paste0("extract_rast_day",i), extract_tmp)
}
rast_masked_day1_pondsonly <- mask(rast_hazed_masked_scaled_day1,
project(pond_polygons_d,rast_hazed_masked_scaled_day1))
rast_masked_day3_pondsonly <- mask(rast_hazed_masked_scaled_day3,
project(pond_polygons_d,rast_hazed_masked_scaled_day3))
rast_masked_day1_pondsonly$NDCI <- (rast_masked_day1_pondsonly$B5-rast_masked_day1_pondsonly$B4)/
(rast_masked_day1_pondsonly$B5+rast_masked_day1_pondsonly$B4)
rast_masked_day3_pondsonly$NDCI <- (rast_masked_day3_pondsonly$B5-rast_masked_day3_pondsonly$B4)/
(rast_masked_day3_pondsonly$B5+rast_masked_day3_pondsonly$B4)
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day1_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day3_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
# Now repeat the process (sorry)
# mask by the cloud threshold
# and then extract mean values for each band for each pond
# Note that this requires the cloud masks and the main data tifs
# to have identical filenames per day
for (i in c(1:length(filenames))){
# Import rasters
rast_tmp <- rast(paste0("gee_tifs/",filenames[i]))
cloud_tmp <- rast(paste0("gee_cloudmasks/",filenames[i]))
# Adjust for haze (sorry)
rast_tmp_hazed <- rast_tmp
rast_tmp_hazed$B1 <- rast_tmp_hazed$B1/df_haze_rel$B1[i]
rast_tmp_hazed$B2 <- rast_tmp_hazed$B2/df_haze_rel$B2[i]
rast_tmp_hazed$B3 <- rast_tmp_hazed$B3/df_haze_rel$B3[i]
rast_tmp_hazed$B4 <- rast_tmp_hazed$B4/df_haze_rel$B4[i]
rast_tmp_hazed$B5 <- rast_tmp_hazed$B5/df_haze_rel$B5[i]
rast_tmp_hazed$B6 <- rast_tmp_hazed$B6/df_haze_rel$B6[i]
rast_tmp_hazed$B7 <- rast_tmp_hazed$B7/df_haze_rel$B7[i]
rast_tmp_hazed$B8 <- rast_tmp_hazed$B8/df_haze_rel$B8[i]
rast_tmp_hazed$B8A <- rast_tmp_hazed$B8A/df_haze_rel$B8A[i]
rast_tmp_hazed$B9 <- rast_tmp_hazed$B9/df_haze_rel$B9[i]
rast_tmp_hazed$B11 <- rast_tmp_hazed$B11/df_haze_rel$B11[i]
rast_tmp_hazed$B12 <- rast_tmp_hazed$B12/df_haze_rel$B12[i]
assign(paste0("rast_hazed_day",i), rast_tmp_hazed)
# Perform cloud masking
#rast_tmp_resampled <- resample(rast_tmp,cloud_tmp,method="near")
cloud_tmp_resampled <- resample(cloud_tmp,rast_tmp,method="mode")
rast_tmp_hazed_masked <- mask(x = rast_tmp,
mask = cloud_tmp_resampled,
maskvalues = seq(cloud_threshold[i],100,1))
assign(paste0("rast_hazed_masked_day",i), rast_tmp_hazed_masked)
# Scale
rast_tmp_hazed_masked_scaled <- terra::scale(rast_tmp_hazed_masked,
center=F,
scale=T)
assign(paste0("rast_hazed_masked_scaled_day",i), rast_tmp_hazed_masked_scaled)
# Extract themean  reflectance data from the ponds
#extract_tmp <- extract(rast_tmp_masked,pond_polygons_d,fun=mean,na.rm=TRUE)
extract_tmp <- extract(rast_tmp_hazed_masked_scaled,pond_polygons_d,fun=mean,na.rm=TRUE)
names(extract_tmp)[c(2:ncol(extract_tmp))] <-
paste0(names(extract_tmp)[c(2:ncol(extract_tmp))],"_day",i)
assign(paste0("extract_rast_day",i), extract_tmp)
}
rast_masked_day1_pondsonly <- mask(rast_hazed_masked_scaled_day1,
project(pond_polygons_d,rast_hazed_masked_scaled_day1))
rast_masked_day3_pondsonly <- mask(rast_hazed_masked_scaled_day3,
project(pond_polygons_d,rast_hazed_masked_scaled_day3))
rast_masked_day1_pondsonly$NDCI <- (rast_masked_day1_pondsonly$B5-rast_masked_day1_pondsonly$B4)/
(rast_masked_day1_pondsonly$B5+rast_masked_day1_pondsonly$B4)
rast_masked_day3_pondsonly$NDCI <- (rast_masked_day3_pondsonly$B5-rast_masked_day3_pondsonly$B4)/
(rast_masked_day3_pondsonly$B5+rast_masked_day3_pondsonly$B4)
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day1_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
ggplot() +
geom_spatraster(aes(fill=NDCI),data=rast_masked_day3_pondsonly)  +
scale_fill_viridis() +
geom_spatvector(data=vect_pond_names,fill=NA,colour="red")
?extract
# Now repeat the process (sorry)
# mask by the cloud threshold
# and then extract mean values for each band for each pond
# Note that this requires the cloud masks and the main data tifs
# to have identical filenames per day
for (i in c(1:length(filenames))){
# Import rasters
rast_tmp <- rast(paste0("gee_tifs/",filenames[i]))
cloud_tmp <- rast(paste0("gee_cloudmasks/",filenames[i]))
# Adjust for haze (sorry)
rast_tmp_hazed <- rast_tmp
rast_tmp_hazed$B1 <- rast_tmp_hazed$B1/df_haze_rel$B1[i]
rast_tmp_hazed$B2 <- rast_tmp_hazed$B2/df_haze_rel$B2[i]
rast_tmp_hazed$B3 <- rast_tmp_hazed$B3/df_haze_rel$B3[i]
rast_tmp_hazed$B4 <- rast_tmp_hazed$B4/df_haze_rel$B4[i]
rast_tmp_hazed$B5 <- rast_tmp_hazed$B5/df_haze_rel$B5[i]
rast_tmp_hazed$B6 <- rast_tmp_hazed$B6/df_haze_rel$B6[i]
rast_tmp_hazed$B7 <- rast_tmp_hazed$B7/df_haze_rel$B7[i]
rast_tmp_hazed$B8 <- rast_tmp_hazed$B8/df_haze_rel$B8[i]
rast_tmp_hazed$B8A <- rast_tmp_hazed$B8A/df_haze_rel$B8A[i]
rast_tmp_hazed$B9 <- rast_tmp_hazed$B9/df_haze_rel$B9[i]
rast_tmp_hazed$B11 <- rast_tmp_hazed$B11/df_haze_rel$B11[i]
rast_tmp_hazed$B12 <- rast_tmp_hazed$B12/df_haze_rel$B12[i]
assign(paste0("rast_hazed_day",i), rast_tmp_hazed)
# Perform cloud masking
#rast_tmp_resampled <- resample(rast_tmp,cloud_tmp,method="near")
cloud_tmp_resampled <- resample(cloud_tmp,rast_tmp,method="near")
rast_tmp_hazed_masked <- mask(x = rast_tmp,
mask = cloud_tmp_resampled,
maskvalues = seq(cloud_threshold[i],100,1))
assign(paste0("rast_hazed_masked_day",i), rast_tmp_hazed_masked)
# Scale
rast_tmp_hazed_masked_scaled <- terra::scale(rast_tmp_hazed_masked,
center=F,
scale=T)
assign(paste0("rast_hazed_masked_scaled_day",i), rast_tmp_hazed_masked_scaled)
# Extract themean  reflectance data from the ponds
#extract_tmp <- extract(rast_tmp_masked,pond_polygons_d,fun=mean,na.rm=TRUE)
extract_tmp <- extract(rast_tmp_hazed_masked_scaled,pond_polygons_d,fun=mean,na.rm=TRUE,
touches=F)
names(extract_tmp)[c(2:ncol(extract_tmp))] <-
paste0(names(extract_tmp)[c(2:ncol(extract_tmp))],"_day",i)
assign(paste0("extract_rast_day",i), extract_tmp)
}
# Generate true colour images to get our bearings
g_day1_rgb_1 <- ggplot() +
geom_spatraster_rgb(data=rast_day1,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 1; RGB")
g_day1_rgb_2 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_day1,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 1; RGB; hazed")
g_day1_rgb_3 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_masked_scaled_day1,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 1; RGB; masked; hazed")
g_day2_rgb_1 <- ggplot() +
geom_spatraster_rgb(data=rast_day2,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 2; RGB")
g_day2_rgb_2 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_day2,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 2; RGB; hazed")
g_day2_rgb_3 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_masked_scaled_day2,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 2; RGB; masked; hazed")
g_day3_rgb_1 <- ggplot() +
geom_spatraster_rgb(data=rast_day3,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 3; RGB")
g_day3_rgb_2 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_day3,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 3; RGB; hazed")
g_day3_rgb_3 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_masked_scaled_day3,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 3; RGB; masked; hazed")
g_day4_rgb_1 <- ggplot() +
geom_spatraster_rgb(data=rast_day4,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 4; RGB")
g_day4_rgb_2 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_day4,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 4; RGB; hazed")
g_day4_rgb_3 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_masked_scaled_day4,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 4; RGB; masked; hazed")
g_day5_rgb_1 <- ggplot() +
geom_spatraster_rgb(data=rast_day5,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 5; RGB")
g_day5_rgb_2 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_day5,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 5; RGB; hazed")
g_day5_rgb_3 <- ggplot() +
geom_spatraster_rgb(data=rast_hazed_masked_scaled_day5,r=4,g=3,b=2,max_col_value=3500) +
geom_spatvector(data=pond_polygons_d,fill=NA,linewidth=1.5) +
geom_spatvector_text(aes(label=pond),data=vect_pond_names,size=2) +
ggtitle("Day 5; RGB; masked; hazed")
# Combine all into a side-by-side comparison
g_rgb_clouds <- grid.arrange(g_day1_rgb_1,
g_day1_rgb_2,
g_day1_rgb_3,
g_cloud_1,
g_day3_rgb_1,
g_day3_rgb_2,
g_day3_rgb_3,
g_cloud_3,
g_day4_rgb_1,
g_day4_rgb_2,
g_day4_rgb_3,
g_cloud_4,
g_day5_rgb_1,
g_day5_rgb_2,
g_day5_rgb_3,
g_cloud_5,
nrow=5)
ggsave("preliminary_analysis/g_rgb_clouds.png",g_rgb_clouds,width=20,height=16)
# Merge band pond data into a single data frame
# https://stackoverflow.com/questions/8091303/simultaneously-merge-multiple-data-frames-in-a-list
df_rast <- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "ID", all.x = TRUE),
mget(ls(pattern="extract_rast_day")))
df_rast <- merge(df_rast,df_pond_names[c("pond","polygon")],
by.x="ID",by.y="polygon")
# Combine ground-truthed data with raster data
df_gt_rast <- merge(df_gt,df_rast,by="pond")
#Remove ID col
df_gt_rast <- df_gt_rast[,-35]
# Order the columns correctly
namevec <- c(names(df_gt_rast)[c(1:4)],sort(names(df_gt_rast)[c(5:ncol(df_gt_rast))]))
df_gt_rast <- df_gt_rast[,namevec]
# Get the variable names
vnames <- substr(names(df_gt_rast)[c(5:ncol(df_gt_rast))],1,(nchar(names(df_gt_rast))[c(5:ncol(df_gt_rast))]-5))
vnames <- unique(vnames)
tmp_seq <- seq(5,ncol(df_gt_rast),1)
tmp_seq_split <- split(tmp_seq, as.integer(gl(length(tmp_seq), length(filenames), length(tmp_seq))))
names(tmp_seq_split) <- NULL
# Reshape to long format
df_wide <- reshape(df_gt_rast,
direction="long",
varying=tmp_seq_split,
v.names=vnames,
timevar="day",
idvar=c("pond"),
times=c(1:length(filenames)))
# Convert character columns to numeric
df_wide$ammonia <- as.numeric(df_wide$ammonia)
df_wide$chlorophyll <- as.numeric(df_wide$chlorophyll)
df_wide$do <- as.numeric(df_wide$do)
df_wide$ph <- as.numeric(df_wide$ph)
df_wide$phycocyanin <- as.numeric(df_wide$phycocyanin)
df_wide$temperature <- as.numeric(df_wide$temperature)
# Retain only complete cases
df_wide_c <- df_wide[complete.cases(df_wide),]
# Check average values by day
aggregate(B2~day,FUN=mean,df_wide_c)
aggregate(B3~day,FUN=mean,df_wide_c)
aggregate(B4~day,FUN=mean,df_wide_c)
# Save to file
write.csv(df_wide,"intermediate/df_wide.csv",row.names = F)
write.csv(df_wide_c,"intermediate/df_wide_c.csv",row.names = F)
##############
### Set up ###
##############
#Load libraries etc
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory
library(terra) #For spatial data analysis
library(tidyterra) #For graphing etc
library(measurements) #For converting units
library(stringr) #For converting units
library(gridExtra) #to help graphing
library(ggplot2) #For graphing
theme_set(theme_bw()) #Because I'm fashionable
library(ggcorrplot) #For generating the correlation plot
library(viridis) #To help graphing
library(ggfortify) #To help graphing
# Load data
df_wide_c <- read.csv("intermediate/df_wide_c.csv")
############################
### Correlation matrices ###
############################
# Create a correlation matrix (rounded to 2 decimal points)
corr <- round(100*cor(df_wide_c[,c(7:ncol(df_wide_c))],use="pairwise.complete.obs"),2)
rownames(corr) <- gsub(".Rating","",rownames(corr))
colnames(corr) <- gsub(".Rating","",colnames(corr))
# Graph the correlation matrix as a correlation plot
g_corrplot <- ggcorrplot(corr,type = "lower",lab = TRUE,
lab_col="skyblue") +
scale_fill_viridis(direction=-1,option="inferno") +
labs(title="Correlation between variables (%)") +
theme(plot.background = element_rect(fill="white"),
plot.title = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 1))
g_corrplot
# Save correlation plot to file
ggsave("preliminary_analysis/g_corrplot.png",g_corrplot,width=15,height=15)
####################################
### Principal component analysis ###
####################################
# I'll do two PCAs - one on the environmental variables, and one
# on the bands
# Make data frames
df_wide_c$day <- as.factor(df_wide_c$day)
df_wide_c_pca_bands <- df_wide_c[,c(7:18)] #Columns with bands
df_wide_c_pca_env <- df_wide_c[,c(6,19:23)] #Columns with environmental vars
# Generate PCA objects
pca_bands <- prcomp(df_wide_c_pca_bands, scale=T)
pca_env <- prcomp(df_wide_c_pca_env, scale=T)
# Graph
g_pca_bands <- autoplot(pca_bands,
data=df_wide_c,
colour="day",
loadings = T,
loadings.label = T)
g_pca_bands
g_pca_env <- autoplot(pca_env,
data=df_wide_c,
colour="day",
loadings = T,
loadings.label = T)
g_pca_env
# Save to file
g_pca <- grid.arrange(g_pca_bands,g_pca_env,nrow=2)
ggsave("preliminary_analysis/g_pca.png",g_pca,width=6,height=8)
##########################
### Summary statistics ###
##########################
# View summary statistics for environmental variables
sumstat_env <- data.frame(
"min"=sapply(df_wide_c_pca_env, min),
"q1"=sapply(df_wide_c_pca_env, quantile, probs=0.25),
"mean"=colMeans(df_wide_c_pca_env),
"q3"=sapply(df_wide_c_pca_env, quantile, probs=0.75),
"max"=sapply(df_wide_c_pca_env, max))
sumstat_env
# View summary statistics for bands
sumstat_bands <- data.frame(
"min"=sapply(df_wide_c_pca_bands, min),
"q1"=sapply(df_wide_c_pca_bands, quantile, probs=0.25),
"mean"=colMeans(df_wide_c_pca_bands),
"q3"=sapply(df_wide_c_pca_bands, quantile, probs=0.75),
"max"=sapply(df_wide_c_pca_bands, max))
sumstat_bands
# Save to file
write.csv(sumstat_env,"preliminary_analysis/sumstat_env.csv")
write.csv(sumstat_bands,"preliminary_analysis/sumstat_bands.csv")
######################################################
### Try different ways of expressing the variables ###
######################################################
# The higher-welfare range of temperature is 25 to 33 C
df_wide_c$temperature > 33
df_wide_c$temperature < 25
# Thus, we can conclude that there are no problems with temperature
# in this sample.
# The higher-welfare range of pH is 7 to 8
df_wide_c$ph < 7
df_wide_c$ph > 8
# Thus, we can conclude that almost every pond has a pH
# between 8 and 9
# So there are issues with pH in the sampled ponds,
# but there's not enough variance to justify turning this
# into a categorical variable
# The higher-welfare range of DO is > 5 for catla and > 3.6 for rohu
df_wide_c$do > 5
df_wide_c$do > 3.6
# Thus, we are justified in making a categorical variable for DO
df_wide_c$do_category <- cut(df_wide_c$do,
breaks=c(-1e99,3.6,5,1e99),
labels=c("bad","moderate","good"))
# The higher-welfare range of ammonia is < 1 for catla and < 0.82 for rohu
df_wide_c$ammonia < 1
df_wide_c$ammonia < 0.82
# Thus, we can conclude that there are no problems with ammonia
# in this sample.
# Now, chlorophyll and phycocyanin
# These are quite correlated
cor.test(df_wide_c$chlorophyll,
df_wide_c$phycocyanin)
# 74.6% correlation
summary(lm(phycocyanin~chlorophyll,data=df_wide_c))
# 55% R-squared
# What's the correlation like visually?
g_algae <- ggplot(aes(x=chlorophyll,y=phycocyanin),data=df_wide_c) +
geom_point()
g_algae
# So they're correlated, but at any one value of one variable,
# there is still a decent amount of variance in the other variable
# Though the literature is suggesting that phycocyanin has limited utility
# in the mean time, I'll just use the cutoff of 100 for chlorophyll
df_wide_c$chlorophyll_category <-  cut(df_wide_c$chlorophyll,
breaks=c(-1e99,100,1e99),
labels=c("bad","good"))
write.csv(df_wide_c,"intermediate/df_wide_c_cats.csv",row.names = F)
